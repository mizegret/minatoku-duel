name: PR Doctor
on:
  pull_request:
    types: [opened, edited, synchronize, ready_for_review, labeled]
permissions:
  contents: read
  pull-requests: write
  issues: write
jobs:
  doctor:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - name: Analyze PR and suggest fixes
        uses: actions/github-script@v7
        with:
          script: |
            const pr = context.payload.pull_request;
            const { owner, repo } = context.repo;

            // 1) Compute diff size
            const files = await github.paginate(github.rest.pulls.listFiles, { owner, repo, pull_number: pr.number, per_page: 100 });
            let adds = 0, dels = 0;
            for (const f of files) { adds += f.additions; dels += f.deletions; }
            const total = adds + dels;
            const thresholds = { XS: 50, S: 150, M: 300, L: 600 };
            let size = 'XL';
            if (total <= thresholds.XS) size = 'XS';
            else if (total <= thresholds.S) size = 'S';
            else if (total <= thresholds.M) size = 'M';
            else if (total <= thresholds.L) size = 'L';

            const labels = pr.labels?.map(l=>l.name) || [];
            const hasAllowLarge = labels.includes('allow:large-pr');
            const isOwnerPR = (pr.user?.login || '') === owner;

            // 2) Suggest or auto-add allow:large-pr for L/XL
            if ((size === 'L' || size === 'XL') && !hasAllowLarge) {
              if (isOwnerPR) {
                await github.rest.issues.addLabels({ owner, repo, issue_number: pr.number, labels: ['allow:large-pr'] }).catch(()=>{});
                await github.rest.issues.createComment({ owner, repo, issue_number: pr.number, body: `自動処理: 変更が大きいため 'allow:large-pr' を付与しました（±${total}行、サイズ: ${size}）。` });
              } else {
                await github.rest.issues.createComment({ owner, repo, issue_number: pr.number, body: `変更が大きいです（±${total}行、サイズ: ${size}）。必要なら '/allow large-pr on' またはラベル 'allow:large-pr' を付与してください。` });
              }
            }

            // 3) Check executable bits for shell scripts and husky hooks
            const cp = require('child_process');
            const fs = require('fs');
            const paths = cp.execSync("git ls-files -z").toString('utf8').split('\u0000').filter(Boolean);
            const candidates = paths.filter(p => p.startsWith('.husky/') || (p.startsWith('scripts/') && p.endsWith('.sh')));
            const missing = [];
            for (const p of candidates) {
              try {
                const m = fs.statSync(p).mode;
                if ((m & 0o111) === 0) missing.push(p);
              } catch {}
            }
            if (missing.length) {
              const cmd = 'git update-index --chmod=+x ' + missing.join(' ') + " && git commit -m \"chore(permissions): mark scripts executable\" && git push";
              const msg = [
                '実行権限(+x)が不足しているファイルがあります。',
                '',
                '対象:',
                missing.map(m => `- ${m}`).join('\n'),
                '',
                '修正例:',
                '```sh',
                cmd,
                '```'
              ].join('\n');
              await github.rest.issues.createComment({ owner, repo, issue_number: pr.number, body: msg });
            }
            return { size, total };
